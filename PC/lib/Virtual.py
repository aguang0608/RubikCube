import Tkinter
###########################################################################################################
###########################################################################################################
###   ____      _              ____        __ _             ###############################################
###  / ___|___ | | ___  _ __  |  _ \  ___ / _(_)_ __   ___  ###############################################
### | |   / _ \| |/ _ \| '__| | | | |/ _ \ |_| | '_ \ / _ \ ###############################################
### | |__| (_) | | (_) | |    | |_| |  __/  _| | | | |  __/ ###############################################
###  \____\___/|_|\___/|_|    |____/ \___|_| |_|_| |_|\___| ###############################################                                                    
###########################################################################################################
###########################################################################################################
class Color :
    white = 'white'
    blue = 'blue'
    red = 'red'
    green = 'green'
    orange = 'orange'
    yellow = 'yellow'
    unknown = 'pink'
###########################################################################################################
###########################################################################################################
### __     ___      _               _    ____      _           ############################################
### \ \   / (_)_ __| |_ _   _  __ _| |  / ___|   _| |__   ___  ############################################
###  \ \ / /| | '__| __| | | |/ _` | | | |  | | | | '_ \ / _ \ ############################################
###   \ V / | | |  | |_| |_| | (_| | | | |__| |_| | |_) |  __/ ############################################
###    \_/  |_|_|   \__|\__,_|\__,_|_|  \____\__,_|_.__/ \___| ############################################
###                                                            ############################################
###########################################################################################################
###########################################################################################################
class Cube :
    part = {}
    #Init
    ########################################################################################################
    ########################################################################################################    
    ###  ___       _ _    ##################################################################################
    ### |_ _|_ __ (_) |_  ##################################################################################
    ###  | || '_ \| | __| ##################################################################################
    ###  | || | | | | |_  ##################################################################################
    ### |___|_| |_|_|\__| ##################################################################################
    ###                   ##################################################################################
    ########################################################################################################
    ########################################################################################################          
    def __init__(self) :
        for partX in ('FUL', 'FUM', 'FUR', 'FLM', 'FMM', 'FRM', 'FDL', 'FDM', 'FDR'): #Front
            self.part[partX] = Color.red
        for partX in ('BUR', 'BUM', 'BUL', 'BRM', 'BMM', 'BLM', 'BDR', 'BDM', 'BDL'): #Back 
            self.part[partX] = Color.orange
        for partX in ('LUB', 'LUM', 'LUF', 'LBM', 'LMM', 'LFM', 'LDB', 'LDM', 'LDF'): #Left 
            self.part[partX] = Color.green
        for partX in ('RUF', 'RUM', 'RUB', 'RFM', 'RMM', 'RBM', 'RDF', 'RDM', 'RDB'): #Right
            self.part[partX] = Color.blue
        for partX in ('UBL', 'UBM', 'UBR', 'ULM', 'UMM', 'URM', 'UFL', 'UFM', 'UFR'): #Up   
            self.part[partX] = Color.white
        for partX in ('DFL', 'DFM', 'DFR', 'DLM', 'DMM', 'DRM', 'DBL', 'DBM', 'DBR'): #Down 
            self.part[partX] = Color.yellow
        self.canvas = None
    ########################################################################################################
    ########################################################################################################
    ###   ____                ##############################################################################
    ###  / ___|___  _ __ ___  ##############################################################################
    ### | |   / _ \| '__/ _ \ ##############################################################################
    ### | |__| (_) | | |  __/ ##############################################################################
    ###  \____\___/|_|  \___| ##############################################################################
    ###                       ##############################################################################
    ########################################################################################################
    ########################################################################################################
    def __view(self) :
        if self.canvas is None :
            return
        listPartUp = ('UBL', 'UBM', 'UBR', 'ULM', 'UMM', 'URM', 'UFL', 'UFM', 'UFR')
        for i in range(3) :
            for j in range(3) :
                x = 202.5 + (j-i) * 55
                y = 20 + (i+j) * 45
                self.canvas.create_polygon(x, y, x+50, y+40, x, y+80, x-50, y+40, fill = self.part[listPartUp[i*3+j]])
        listPartFront = ('FUL', 'FUM', 'FUR', 'FLM', 'FMM', 'FRM', 'FDL', 'FDM', 'FDR')
        for i in range(3) :
            for j in range(3) :
                x = 40 + j * 55 
                y = 155 + i * 60 + j * 45
                self.canvas.create_polygon(x, y, x+50, y+40 , x+50, y+95, x, y+55, fill = self.part[listPartFront[i*3+j]])
        listPartRight = ('RUF', 'RUM', 'RUB', 'RFM', 'RMM', 'RBM', 'RDF', 'RDM', 'RDB')
        for i in range(3) :
            for j in range(3) :
                x = 205 + j * 55
                y = 285 + (i) * 60 + (-j) * 45
                self.canvas.create_polygon(x, y, x+50, y-40, x+50, y+15, x, y+55, fill = self.part[listPartRight[i*3+j]])
    def __rot(self, A, B, C, D) :
        partT = self.part[A]
        self.part[A] = self.part[B]
        self.part[B] = self.part[C]
        self.part[C] = self.part[D]
        self.part[D] = partT
        self.__view()
    def __rotF(self) :
        self.__rot('FUM', 'FLM', 'FDM', 'FRM');
        self.__rot('FUL', 'FDL', 'FDR', 'FUR');
        self.__rot('UFM', 'LFM', 'DFM', 'RFM');
        self.__rot('UFL', 'LDF', 'DFR', 'RUF');
        self.__rot('UFR', 'LUF', 'DFL', 'RDF');
    def __rotULR(self) :
        self.__rot('UMM', 'LMM', 'DMM', 'RMM')
        self.__rot('ULM', 'LDM', 'DRM', 'RUM')
        self.__rot('URM', 'LUM', 'DLM', 'RDM')
    def __rotB(self) :
        self.__rot('BUM', 'BRM', 'BDM', 'BLM')
        self.__rot('BUL', 'BUR', 'BDR', 'BDL')
        self.__rot('UBM', 'RBM', 'DBM', 'LBM')
        self.__rot('UBL', 'RUB', 'DBR', 'LDB')
        self.__rot('UBR', 'RDB', 'DBL', 'LUB')
    def __rotR(self) :
        self.__rot('RUF', 'RDF', 'RDB', 'RUB')
        self.__rot('RFM', 'RDM', 'RBM', 'RUM')
        self.__rot('FRM', 'DRM', 'BRM', 'URM')
        self.__rot('FUR', 'DFR', 'BDR', 'UBR')
        self.__rot('FDR', 'DBR', 'BUR', 'UFR')
    def __rotUFB(self) :
        self.__rot('UMM', 'FMM', 'DMM', 'BMM')
        self.__rot('UBM', 'FUM', 'DFM', 'BDM')
        self.__rot('UFM', 'FDM', 'DBM', 'BUM')
    def __rotL(self) :
        self.__rot('LUF', 'LUB', 'LDB', 'LDF')
        self.__rot('LUM', 'LBM', 'LDM', 'LFM')
        self.__rot('FLM', 'ULM', 'BLM', 'DLM')
        self.__rot('FUL', 'UBL', 'BDL', 'DFL')
        self.__rot('FDL', 'UFL', 'BUL', 'DBL')
    def __rotU(self) :
        self.__rot('UFL', 'UFR', 'UBR', 'UBL')
        self.__rot('UFM', 'URM', 'UBM', 'ULM')
        self.__rot('FUM', 'RUM', 'BUM', 'LUM')
        self.__rot('FUL', 'RUF', 'BUR', 'LUB')
        self.__rot('FUR', 'RUB', 'BUL', 'LUF')
    def __rotFRL(self) :
        self.__rot('FMM', 'RMM', 'BMM', 'LMM')
        self.__rot('FLM', 'RFM', 'BRM', 'LBM')
        self.__rot('FRM', 'RBM', 'BLM', 'LFM')
    def __rotD(self) :
        self.__rot('DFM', 'DLM', 'DBM', 'DRM')
        self.__rot('DFL', 'DBL', 'DBR', 'DFR')
        self.__rot('FDM', 'LDM', 'BDM', 'RDM')
        self.__rot('FDL', 'LDB', 'BDR', 'RDF')
        self.__rot('FDR', 'LDF', 'BDL', 'RDB')
    def __rotURL(self) :
        self.__rotULR()
        self.__rotULR()
        self.__rotULR()
    def __rotUBF(self) :
        self.__rotUFB()
        self.__rotUFB()
        self.__rotUFB()
    def __rotFLR(self) :
        self.__rotFRL()
        self.__rotFRL()
        self.__rotFRL()
    ########################################################################################################
    ########################################################################################################
    ###     _    ____ ___          __    ___                       _   _              ######################
    ###    / \  |  _ \_ _|   ___  / _|  / _ \ _ __   ___ _ __ __ _| |_(_) ___  _ __   ######################
    ###   / _ \ | |_) | |   / _ \| |_  | | | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \  ######################
    ###  / ___ \|  __/| |  | (_) |  _| | |_| | |_) |  __/ | | (_| | |_| | (_) | | | | ######################
    ### /_/   \_\_|  |___|  \___/|_|    \___/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_| ######################
    ###                                      |_|                                      ######################
    ########################################################################################################
    ########################################################################################################
    def F(self, times = 1) :
        for i in range(times) :
            self.__rotF()
    def B(self, times = 1) :
        for i in range(times) :
            self.__rotB()
    def R(self, times = 1) :
        for i in range(times) :
            self.__rotR()
    def L(self, times = 1) :
        for i in range(times) :
            self.__rotL()
    def U(self, times = 1) :
        for i in range(times) :
            self.__rotU()
    def D(self, times = 1) :
        for i in range(times) :
            self.__rotD()
    def f(self, times = 1) :
        for i in range(times) :
            self.__rotF()
            self.__rotULR()
    def b(self, times = 1) :
        for i in range(times) :
            self.__rotB()
            self.__rotURL()
    def r(self, times = 1) :
        for i in range(times) :
            self.__rotR()
            self.__rotUFB()
    def l(self, times = 1) :
        for i in range(times) :
            self.__rotL()
            self.__rotUBF()
    def u(self, times = 1) :
        for i in range(times) :
            self.__rotU()
            self.__rotFRL()
    def d(self, times = 1) :
        for i in range(times) :
            self.__rotD()
            self.__rotFLR()
    def x(self, times = 1) :
        for i in range(times) :
            self.R()
            self.__rotUFB()
            self.L(3)
    def y(self, times = 1) :
        for i in range(times) :
            self.U()
            self.__rotFRL()
            self.D(3)
    def z(self, times = 1) :
        for i in range(times) :
            self.F()
            self.__rotULR()
            self.B(3)
    ########################################################################################################
    ########################################################################################################
    ###     _    ____ ___          __   ____                     _              ############################
    ###    / \  |  _ \_ _|   ___  / _| |  _ \ _ __ __ ___      _(_)_ __   __ _  ############################
    ###   / _ \ | |_) | |   / _ \| |_  | | | | '__/ _` \ \ /\ / / | '_ \ / _` | ############################
    ###  / ___ \|  __/| |  | (_) |  _| | |_| | | | (_| |\ V  V /| | | | | (_| | ############################
    ### /_/   \_\_|  |___|  \___/|_|   |____/|_|  \__,_| \_/\_/ |_|_| |_|\__, | ############################
    ###                                                                  |___/  ############################
    ########################################################################################################
    ########################################################################################################
    def setPart(self, partX, colorX):
        self.part[partX] = colorX
        self.__view()
    def getPart(self, partX):
        return self.part[partX]
    ########################################################################################################
    ########################################################################################################
    ###     _    ____ ___          __   ____       _   _                   #################################
    ###    / \  |  _ \_ _|   ___  / _| |  _ \ __ _| |_| |_ ___ _ __ _ __   #################################
    ###   / _ \ | |_) | |   / _ \| |_  | |_) / _` | __| __/ _ \ '__| '_ \  #################################
    ###  / ___ \|  __/| |  | (_) |  _| |  __/ (_| | |_| ||  __/ |  | | | | #################################
    ### /_/   \_\_|  |___|  \___/|_|   |_|   \__,_|\__|\__\___|_|  |_| |_| #################################                                                                    
    ########################################################################################################
    ########################################################################################################
    ### UF UR UB UL DF DR DB DL FR FL BR BL UFR URB UBL ULF DRF DFL DLB DBR ################################
    ########################################################################################################
    def getPattern(self) :
        listBlock = (
                ('UFM','FUM'), #UF
                ('URM','RUM'), #UR
                ('UBM','BUM'), #UB
                ('ULM','LUM'), #UL
                ('DFM','FDM'), #DF
                ('DRM','RDM'), #DR
                ('DBM','BDM'), #DB
                ('DLM','LDM'), #DL
                ('FRM','RFM'), #FR
                ('FLM','LFM'), #FL
                ('BRM','RBM'), #BR
                ('BLM','LBM'), #BL
                ('UFR','FUR','RUF'), #UFR
                ('UBR','RUB','BUR'), #URB
                ('UBL','BUL','LUB'), #UBL
                ('UFL','LUF','FUL'), #ULF
                ('DFR','RDF','FDR'), #DRF
                ('DFL','FDL','LDF'), #DFL
                ('DBL','LDB','BDL'), #DLB
                ('BDR','DBR','RDB'), #DBR
            )
        colorToDirect = {
            self.part['UMM'] : 'U',
            self.part['DMM'] : 'D',
            self.part['FMM'] : 'F',
            self.part['BMM'] : 'B',
            self.part['LMM'] : 'L',
            self.part['RMM'] : 'R'
        }
        pattern = []
        for block in listBlock :
            now = ''
            for piece in block :
                now += colorToDirect[self.part[piece]]
            pattern.append(now)
        return pattern
    ########################################################################################################
    ########################################################################################################
    ###  _   _                 ___       _             __                 ##################################
    ### | | | |___  ___ _ __  |_ _|_ __ | |_ ___ _ __ / _| __ _  ___ ___  ##################################
    ### | | | / __|/ _ \ '__|  | || '_ \| __/ _ \ '__| |_ / _` |/ __/ _ \ ##################################
    ### | |_| \__ \  __/ |     | || | | | ||  __/ |  |  _| (_| | (_|  __/ ##################################
    ###  \___/|___/\___|_|    |___|_| |_|\__\___|_|  |_|  \__,_|\___\___| ##################################
    ########################################################################################################
    ########################################################################################################
    def bindViewFrame(self, frame) :
        self.canvas = Tkinter.Canvas(frame, bg="black", height=500, width=400)
        self.canvas.pack()
        self.__view()